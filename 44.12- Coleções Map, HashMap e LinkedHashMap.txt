Usa as Classes: MapTest

É uma coleção q mantém chave valor
Vamos trabalhar com a interface


#REGRAS#

N pode existir chaves duplicadas
Se usar HashMap, ele n ficará na ordem 
Ele substitui elementos repetidos pelo oq vem dps diferente do Set q só n mostra eles



package Estudando.javacore.Y_colecoes.test;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

/***
 * INTERFACE MAP
 */

public class MapTest {
    public static void main(String[] args) {
        // K = key, V = value
        // Para manter a ordem de inserção


//  Q tipo é a chave?  |---> E o valor?
//             |       |
        Map<String, String> map = new LinkedHashMap<>(); //Se usa Hash n tem cm garantir cm os elementos estarão organizados
                                                                                                   // (A n ser q use LinkedHashMap q mantém a ordem de iserção)
        map.put("teklado", "teclado");
        map.put("mouze", "mouse");
        map.put("vc", "você");
        // Diferente do hashSet, no hashMap o valoro repetido
        // substitui o antigo, não é ignorado
        map.put("meza", "mesa");

        // É possível iterar tanto sobre as chaves
        // quanto sobre os valores
        for(String key : map.keySet()){  //É um Set pq n pode ter elementos duplicados
            System.out.println(key);
        }

        // Mas para usar o for tanto em chave quanto
        // em valor, só assim
        for(Map.Entry<String, String> entry : map.entrySet()){
            System.out.println("Key: " + entry.getKey() + " Value: " + entry.getValue());
        } 

    }
}


======================================================================================

Parte 2
*Aula 129*
Uso das classes: Consumidor, ConsumidorMapTest

Classe Map tem vários métodos
Sobreescreve os valores duplicados do equals em questão


package Estudando.javacore.Y_colecoes.test;


import Estudando.javacore.Y_colecoes.classes.Produto;
import br.com.abc.javacore.Ycolecoes.classe.Consumidor;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConsumidorMapTest {
    public static void main(String[] args) {
        Consumidor consumidor = new Consumidor("Nathália Ignácio", "123");
        Consumidor consumidor2 = new Consumidor("DevDojo", "321");

        Produto produto1 = new Produto("123", "Laptop Lenovo", 2000.0);
        Produto produto2 = new Produto("321", "Picanha", 26.4);
        Produto produto3 = new Produto("878", "Teclado Razer", 1000.0);
        Produto produto4 = new Produto("012", "Samsung Galaxy S7", 3250.0 );

        Map<Consumidor, Produto> map = new HashMap<>();  //Quero saber oq aquele consumidor comprou
        map.put(consumidor, produto2);
        map.put(consumidor2, produto4);
        for (Map.Entry<Consumidor, Produto> entry : map.entrySet()){
            System.out.println(entry.getKey().getNome() + " - " + entry.getValue().getNome());
        }

        System.out.println("-----------------------");


        // E se um consumidor comprou mais que um produto?:
        List<Produto> produtosConsumidor1 = new ArrayList<>();
        produtosConsumidor1.add(produto1);
        produtosConsumidor1.add(produto2);
        List<Produto> produtosConsumidor2 = new ArrayList<>();
        produtosConsumidor2.add(produto3);
        produtosConsumidor2.add(produto4);

        Map<Consumidor, List<Produto>> map2 = new HashMap<>(); //Uma Lsita de Cponsumidores comprando uma lista de produtos
        map2.put(consumidor, produtosConsumidor1);
        map2.put(consumidor2, produtosConsumidor2);

        for (Map.Entry<Consumidor, List<Produto>> entry : map2.entrySet()){
            System.out.println(entry.getKey().getNome() + ":");
            for (Produto produto : entry.getValue()){  //Só q vc vai precisar de um for p dizer o value q é uma lista
                System.out.println(produto.getNome());
            }
        }
    }
}





package Estudando.javacore.Y_colecoes.classes;

import java.util.Objects;

public class Consumidor {
    private String nome;
    private String cpf;

    public Consumidor(String nome, String cpf) {
        this.nome = nome;
        this.cpf = cpf;
    }

    @Override
    public String toString() {
        return "Consumidor{" +
                "nome='" + nome + '\'' +
                ", cpf='" + cpf + '\'' +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Consumidor that = (Consumidor) o;
        return Objects.equals(cpf, that.cpf);
    }

    @Override
    public int hashCode() {
        return Objects.hash(cpf);
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public String getCpf() {
        return cpf;
    }

    public void setCpf(String cpf) {
        this.cpf = cpf;
    }
}
