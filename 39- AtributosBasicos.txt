#SUMÁRIO#

BasicFilesAttributes: Atributos base p tds os sistemas operacionais

PosixFileAttributes: Atributos basiados no sistema Inux

DosFileAttribites: Sistemas voltados a windows

Ambas tb servem p pegar os atributos dos diretórios
Eles servem apenas para leitura

Na parte de modificações temos:

FileOwnerAttributeView: Serve p setar o dono daquele diretório/arquivo

AclFileAttributeView: Tem permissões mais avançadas p trabalhar c os diretórios e os arquivos

======================================================================================

						BasicFilesAttributes


package Estudando.javacore.X_nio;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.*;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

public class AtributosBasicosTest {
    public static void main(String[] args) throws IOException {
//
        Date primeiroDeDezembro = new GregorianCalendar(2015, Calendar.DECEMBER, 1).getTime(); //Tem um construtor q aceita escrever td na msm linha
        File file = new File("folder2\\arquivo.txt");
        file.createNewFile();
        file.setLastModified(primeiroDeDezembro.getTime());
        System.out.println(file.lastModified());
        file.delete();
        Path path = Paths.get("folder2\\arquivo_path.txt");
        Files.createFile(path);
        FileTime fileTime = FileTime.fromMillis(primeiroDeDezembro.getTime());
        Files.setLastModifiedTime(path, fileTime);
        System.out.println(Files.getLastModifiedTime(path));
        Files.deleteIfExists(path);
//        A diferença entre ad duas formas é q uma tá em milisegundos e a outra formatada

        path = Paths.get("src\\Estudando\\javacore\\A_introducaoclasses\\classes\\Carro.java");
        System.out.println(Files.isReadable(path));
        System.out.println(Files.isWritable(path));
        System.out.println(Files.isExecutable(path));
// 3 interfaces criadas p nós trabalharmos de forma mais organizada: BasicFilesAttributes, PosixFileAttributes, DosFileAttributes
//Eles servem apenas para leitura

//        Esses são os atributos basicos da Interface BasicFileAttributes
        BasicFileAttributes atributosBasicos = Files.readAttributes(path, BasicFileAttributes.class);  //Assim q pega, cria uma variável c a interface + a classe Files. o método em questão c seus atributos
        System.out.println("create " + atributosBasicos.creationTime());
        System.out.println("lastAccess " + atributosBasicos.lastAccessTime());
        System.out.println("LastModified " + atributosBasicos.lastModifiedTime());
        System.out.println("---------------------------------");
//        System.out.println(atributosBasicos.isDirectory());
//        System.out.println(atributosBasicos.isSymbolicLink());
//        System.out.println(atributosBasicos.isRegularFile());

//        Caso queira alterar algo tem estes aq
//        BasicFileAttributeView, PosixFileAttributeView, DosFileAttributeView, FileOwnerAttributeView, AclFileAttributeView
        FileTime lastModified = atributosBasicos.lastModifiedTime();
        FileTime created = atributosBasicos.creationTime();
        FileTime lastAcess = FileTime.fromMillis(System.currentTimeMillis()); //currentTimeMillis é a data/hr atual
//        Nós só refizemos o FileTime pq o BasicFileAttributeView usa cm método de chamada
        BasicFileAttributeView basicView = Files.getFileAttributeView(path, BasicFileAttributeView.class);
        basicView.setTimes(lastModified, lastAcess, created);

        System.out.println("create " + atributosBasicos.creationTime());
        System.out.println("lastAccess " + atributosBasicos.lastAccessTime());
        System.out.println("LastModified " + atributosBasicos.lastModifiedTime());
    }
}