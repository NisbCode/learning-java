Usando as classes: TesteConexao, ConexaoFactory

Okay, basicamente agt tá usando o ResultSet, uma interface  q tem vários métodos
O de hj é selecionando registros usando a Interface Statement
A ResultSet vai passar o cursor pelos arquivos e o Statement vai pegar 

Tb aprendemos a procurar por nome usando o msm comando do Java mas com o código do MySQL usando WHERE

package Estudando.javacore.ZZB_jdbc.test;

import Estudando.javacore.ZZB_jdbc.classe.Comprador;
import Estudando.javacore.ZZB_jdbc.database.CompradorDBOLD;
import java.util.List;

public class TesteConexao {
    public static void main(String[] args) {

//         SELECT * FROM no java (Para mostrar a lista)
        List<Comprador> listaComprador = selecionarTudo();
        System.out.println(listaComprador);

         //LIKE no java
        List<Comprador> buscandoPedacoNome = procurarPeloNome("ma");
        System.out.println(buscandoPedacoNome);

    }

    // Escolha um método para executar no main e divirta-se :)
    public static void inserir(){
        Comprador inserirCompradorPriscila = new Comprador("111.111.111-12", "Priscila ");
        CompradorDBOLD compradorDB = new CompradorDBOLD();
        compradorDB.save(inserirCompradorPriscila); //vai retornar o numero de linhas alteradas
    }

    public static void deletar(){
        Comprador comprador = new Comprador();
        comprador.setId(2);
        CompradorDBOLD.delete(comprador);
    }

    public static void atualizar(){
        Comprador comprador = new Comprador(1, "000.000.000-11", "MARIA");
        CompradorDBOLD.update(comprador);
    }

    public static List<Comprador> selecionarTudo(){
        return CompradorDBOLD.selectAll();
    }

    public static List<Comprador> procurarPeloNome(String nome){
        return CompradorDBOLD.searchByName(nome);
    }
}







package Estudando.javacore.ZZB_jdbc.database;


import Estudando.javacore.ZZB_jdbc.classe.Comprador;
import Estudando.javacore.ZZB_jdbc.ConexaoFactory;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * ADICIONANDO DADOS A UMA TABELA COM JAVA
 */

public class CompradorDBOLD {
    public static void save(Comprador comprador) {
        // INSERT INTO no java
        String insertInto = "INSERT INTO agencia.comprador (cpf, nome) VALUES ('" + comprador.getNome() + "', '" + comprador.getCpf() + "');";
        // conectar o java com o banco de dados
        Connection conn = ConexaoFactory.getConexao();
        try {
            Statement stmt = conn.createStatement();
            // Dentro da classe Statement temos vários tipos
            // de execute:
            //   executeUpdate: usado para ações que mudam
            //   o estado da tabela (Update, Delete e Alter)
            //   execute: é usado quando o desenvolvedor não
            //   sabe o que vai fazer de primeira
            //   executeQuery: para fazer consulta
            System.out.println(stmt.executeUpdate(insertInto));
            ConexaoFactory.close(conn, stmt);
            System.out.println("Registro inserido com sucesso");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void delete(Comprador comprador) {
        // DELETE no java
        if (comprador == null || comprador.getId() == null) {
            System.out.println("Não foi possível excluir o registro");
            return;
        }
        String delete = "DELETE FROM agencia.comprador WHERE id = '" + comprador.getId() + "';";
        // conectar o java com o banco de dados
        Connection conn = ConexaoFactory.getConexao();
        try {
            Statement stmt = conn.createStatement();
            System.out.println(stmt.executeUpdate(delete));
            ConexaoFactory.close(conn, stmt);
            System.out.println("Registro excluído com sucesso");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void update(Comprador comprador) {
        // UPDATE no java
        if (comprador == null || comprador.getId() == null) {
            System.out.println("Não foi possível atualizar o registro");
            return;
        }
        String update = "UPDATE agencia.comprador SET cpf = '" + comprador.getCpf() + "', nome = '" + comprador.getNome() + "' WHERE id = '" + comprador.getId() + "';";
        // conectar o java com o banco de dados
        Connection conn = ConexaoFactory.getConexao();
        try {
            Statement stmt = conn.createStatement();
            System.out.println(stmt.executeUpdate(update));
            ConexaoFactory.close(conn, stmt);
            System.out.println("Registro atualizado com sucesso");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
//    Traz uma lista de compradores
    public static List<Comprador> selectAll() {
        // SELECT * FROM no java
        String selectAllFrom = "SELECT id, nome, cpf FROM agencia.comprador";
        // conectar o java com o banco de dados
        Connection conn = ConexaoFactory.getConexao();
        List<Comprador> compradorList = new ArrayList<>();
        try {
            Statement stmt = conn.createStatement();
            // Introduzindo a classe ResultSet
            ResultSet resultSet = stmt.executeQuery(selectAllFrom);
            // Para pegar os dados: "Enquanto o resultSet tiver algum proximo item..."
            while (resultSet.next()) {
                // "... pegue ou o id (columnIndex, que sempre começa em 1) desejado ou o nome (columnLabel) da coluna desejada,
                // depende do que o desenvolvedor vai inserir"
                compradorList.add(new Comprador(resultSet.getInt("id"), resultSet.getString("cpf"), resultSet.getString("nome")));

            }
            ConexaoFactory.close(conn, stmt, resultSet);
            return compradorList;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

//    Procura Compradores
    public static List<Comprador> searchByName(String nome) {
        // LIKE no java, para buscar por pedaços de palavras (especificamente no nome, aqui)
        String selectAllFrom = "SELECT id, nome, cpf FROM agencia.comprador WHERE nome LIKE '%" + nome + "%';"; //% é símbolo do MySQL dentro dele vc põe sua busca
        // conectar o java com o banco de dados
        Connection conn = ConexaoFactory.getConexao();
        List<Comprador> compradorList = new ArrayList<>();
        try {
            Statement stmt = conn.createStatement();
            // Introduzindo a classe ResultSet
            ResultSet resultSet = stmt.executeQuery(selectAllFrom);
            // Para pegar os dados: "Enquanto o resultSet tiver algum proximo item..."
            while (resultSet.next()) {
                // "... pegue ou o id (columnIndex, que sempre começa em 1) desejado ou o nome (columnLabel) da coluna desejada,
                // depende do que o desenvolvedor vai inserir"
                compradorList.add(new Comprador(resultSet.getInt("id"), resultSet.getString("nome"), resultSet.getString("cpf")));

            }
            ConexaoFactory.close(conn, stmt, resultSet);
            return compradorList;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
}