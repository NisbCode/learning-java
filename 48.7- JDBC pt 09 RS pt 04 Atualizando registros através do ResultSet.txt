Uso das classes: CompradorDBOLD, TesteConexao

Nessa aula tamos de fato aprendendo a atualizar os registros c alguns métodos do ResultSet
Movendo o cursor



    // Agora os métodos que, de fato, mexem com a alteração do sentido
    // da leitura dos dados  (Ele vai mover uma espécime de cursor invisível p a linha q vc mandar e receber o valor daquela linha[Número, nome, etc])
    public static void testTypeScroll() {
        String selectAllFrom = "SELECT id, nome, cpf FROM agencia.comprador";

        // conectar o java com o banco de dados
        Connection conn = ConexaoFactory.getConexao();
        try {
            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY); //Isso pq dependendo o driver ele pode suportar outros
            ResultSet resultSet = stmt.executeQuery(selectAllFrom);

            // Para ir com o cursor, a referencia, até a ultima linha da tabela
            if (resultSet.last()) {
                System.out.println("Última linha: " + new Comprador(resultSet.getInt("id"), resultSet.getString("cpf"), resultSet.getString("nome")));
                System.out.println("Numero ultima linha: " + resultSet.getRow());
            }

            // Para voltar até a primeira linha
            System.out.println("De volta à primeira linha?: " + resultSet.first()); //Ele retorna um boolean
            System.out.println("Numero da linha atual: " + resultSet.getRow());     //P mostrar onde ele tá agr

            // ou, também tem o método absolute(), que vai pra linha que tu quiser
            System.out.println("Linha 4 com o absolute?: " + resultSet.absolute(4));
            System.out.println("Numero da linha atual: " + resultSet.getRow());

            // método relative(): vai pra linha que voce quiser baseado na que você ja está
            System.out.println("O relative mudou a linha: " + resultSet.relative(-1));
            System.out.println("Numero da linha atual: " + resultSet.getRow());

            // Para checar a posição sem mover
            System.out.println("Está na primeira linha: " + resultSet.isFirst());
            System.out.println("Está na última linha: " + resultSet.isLast());

            // Para inverter a ordem da qual a tabela é exibida levando em conta a posição do cursor
            System.out.println("--------------------");
            while (resultSet.previous()) {
                System.out.println(new Comprador(resultSet.getInt("id"), resultSet.getString("cpf"), resultSet.getString("nome")));
            }

            // Para inverter a ordem da tabela
            System.out.println("--------------------");
            resultSet.afterLast();
            while (resultSet.previous()) {
                System.out.println(new Comprador(resultSet.getInt("id"), resultSet.getString("cpf"), resultSet.getString("nome")));
            }

            ConexaoFactory.close(conn, stmt, resultSet);
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    // Update com uso do ResultSet
    public static void updateNomesToLowerCase() {
        // SELECT * FROM no java
        String selectAllFrom = "SELECT id, nome, cpf FROM agencia.comprador";
        // conectar o java com o banco de dados
        Connection conn = ConexaoFactory.getConexao();
        try {
            // é importante ter o atributo do tipo do ResultSet e se é atualizavel ou n
            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet resultSet = stmt.executeQuery(selectAllFrom);
            while (resultSet.next()) {

                // é aqui que atualiza o valor no banco, os parametros são
                // nome da coluna e o valor pra substituir
                resultSet.updateString("nome", resultSet.getString("nome").toLowerCase());

                // método cancelRowUpdates(): devido aos resultados do
                // updateString() não serem tão confiáveis ao ser chamados
                // 2 vezes ou mais, esse método cancela as alterações feitas
                // com update
                // Não adianta chamar depois do updateRow, porque dai
                // o banco j foi atualizado
                resultSet.cancelRowUpdates();

                // Agora é necessario atualizar no banco
                resultSet.updateRow();
            }
//
//             Agora que ja foi atualizado no banco, para checar
//             se foi atualizado no ResultSet
//             Código escrito aqui para mostrar como é escrito,
//             mas não funciona para o Driver usado aqui
        resultSet.beforeFirst();
            while (resultSet.next()) {
                System.out.println(resultSet.getString("nome"));
            }

            // Agora pra fazer um INSERT com o ResultSet
            resultSet.absolute(2);
            String nome = resultSet.getString("nome");
            // método moveToInsertRow(): move o cursor para a linha que está
            // para ser criada e cria o espaço que vai receber a inserção
            resultSet.moveToInsertRow();
            resultSet.updateString("nome", nome.toUpperCase());
            resultSet.updateString("cpf", "999.999.999-99");
            // insere a linha
            resultSet.insertRow();
            // pra terminar, é necessário voltar o cursor para onde ele começou
            resultSet.moveToCurrentRow();
            System.out.println("row atual: " + resultSet.getRow());
            resultSet.absolute(7);
            resultSet.deleteRow();


            ConexaoFactory.close(conn, stmt, resultSet);
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }
}







public class TesteConexao {
    public static void main(String[] args) {
        CompradorDBOLD.updateNomesToLowerCase();
